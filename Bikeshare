import time
import pandas as pd
import numpy as np
import calendar
import datetime

import matplotlib
matplotlib.use('Agg')
import matplotlib.pyplot as plt

CITY_DATA = { 'chicago': 'chicago.csv',
              'new york': 'new_york_city.csv',
              'washington': 'washington.csv' }

CITIES = ['chicago', 'new york', 'washington']

MONTHS = ['january', 'february', 'march', 'april', 'may', 'june', 'none']

DAYS = ['sunday', 'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'none']



def get_filters():
    """
    Asks user to specify a city, month, and day to analyze.

    Returns:
        city, month and day
    """
    print('\nHello! Let\'s explore some US bikeshare data!\n')
    # get user input for city (chicago, new york city, washington). HINT: Use a while loop to handle invalid inputs
    while True:
        city = input('\nWould you like to see data for Chicago, New York, or Washington?\n').lower()
        if city in CITIES:
            break
        elif city not in CITIES:
            print('\nOops! Your entry is invalid, please try again.\n')

    # get user input for month (all, january, february, ... , june)

    while True:
        month = input('\nWhich month would you like to look at? January, Feburary, March, April, May, June, or "none"?\n').lower()
        if month in MONTHS:
            break
        elif month not in MONTHS:
            print('\nOops! Your entry is invalid, please try again.\n')

    # get user input for day of week (all, monday, tuesday, ... sunday)
    while True:
        day = input('\nWhich day of the week would you like to look at? You can also specify "none"?\n').lower()
        if day in DAYS:
            break
        elif day not in DAYS:
            print('\nOops! Your entry is invalid, please try again.\n')


    print('-'*50)
    return city, month, day


def load_data(city, month, day):
    """
    Loads data for the specified city and filters by month and day if applicable.

    Args:
        city,month, day as string
    Returns:
        df - Pandas DataFrame containing city data filtered by month and day
    """

    df = pd.read_csv(CITY_DATA[city])

      # convert the Start Time column to datetime
    df['Start Time'] = pd.to_datetime(df['Start Time'])

    # extract month and day of week and hour from Start Time to create new columns
    df['month'] = df['Start Time'].dt.month
    df['day_of_week'] = df['Start Time'].dt.weekday_name
    df['hour'] = df['Start Time'].dt.hour

    # filter by month if applicable
    if month != 'none':
        month =  MONTHS.index(month) + 1
        df = df[ df['month'] == month ]

    # filter by day of week if applicable
    if day != 'none':
        # filter by day of week to create the new dataframe
        df = df[ df['day_of_week'] == day.title()]

    return df

def time_stats(df):
    """Displays statistics on the most frequent times of travel."""

    print('\nCalculating The Most Frequent Times of Travel...\n')
    start_time = time.time()

    # display the most common month

    pop_month = df['month'].value_counts().idxmax()
    print("The most common month is :", pop_month)

    # display the most common day of week
    pop_day = df['day_of_week'].value_counts().idxmax()
    print("The most common day of week is :", pop_day)

    # display the most common start hour
    pop_hour = df['hour'].value_counts().idxmax()
    print("The most common hour is :", pop_hour)

    print("\nThis took %s seconds." % '{0:.2f}'.format((time.time() - start_time)))
    print('-'*50)

def popular_trip(df):
    '''This function returns the most popular trip (i.e. combination of start station and end station)
    Args:
        dataframe (df) of bikeshare data
    Returns:
        String that says the most popular combination of start and end station, count of trips and % of tot
    '''
    trip_counts = df.groupby(['Start Station', 'End Station'])['Start Time'].count()
    trip_station_sorted = trip_counts.sort_values(ascending=False)
    tot_trips = df['Start Station'].count()
    return "The most popular trip : " + "\n  Start station : " + str(trip_station_sorted.index[0][0]) + "\n  End station : " + str(trip_station_sorted.index[0][1]) + "\n  (" + str(trip_station_sorted[0]) +  " trips, " + '{0:.2f}%'.format(((trip_station_sorted[0]/tot_trips) * 100)) + " of trips)"


def station_stats(df):
    """Displays statistics on the most popular stations and trip."""

    print('\nCalculating The Most Popular Stations and Trip...\n')
    start_time = time.time()

    # display most commonly used start station
    pop_start_station = df['Start Station'].value_counts().idxmax()
    print("The most commonly used start station :", pop_start_station)

    # display most commonly used end station
    pop_end_station = df['End Station'].value_counts().idxmax()
    print("The most commonly used end station :", pop_end_station)

    # display most frequent combination of start station and end station trip
    trip_counts = df.groupby(['Start Station', 'End Station'])['Start Time'].count()
    trip_station_sorted = trip_counts.sort_values(ascending=False)
    tot_trips = df['Start Station'].count()
    print("Most popular trip: " + "\n  Start station: " + str(trip_station_sorted.index[0][0]) + "\n  End station: " + str(trip_station_sorted.index[0][1]) + "\n  (" + str(trip_station_sorted[0]) +  " trips, " + '{0:.2f}%'.format(((trip_station_sorted[0]/tot_trips) * 100)) + " of trips)")

    print("\nThis took %s seconds." % '{0:.2f}'.format((time.time() - start_time)))
    print('-'*50)


def trip_duration(df):
    """Displays statistics on the trip duration"""

    print('\nCalculating Trip Duration...\n')

    start_time = time.time()

    # display total travel time
    tot_time = df['Trip Duration'].sum()
    m, s = divmod(tot_time, 60)
    h, m = divmod(m, 60)
    d, h = divmod(h, 24)
    y, d = divmod(d, 365)
    print("\nTotal travel time: %d years %02d days %02d hrs %02d min %02d sec" % (y, d, h, m, s))

    # display mean travel time
    mean_time = df['Trip Duration'].mean()
    m, s = divmod(mean_time, 60)
    h, m = divmod(m, 60)
    d, h = divmod(h, 24)
    y, d = divmod(d, 365)
    print("Average trip time: %d years %02d days %02d hrs %02d min %02d sec" % (y, d, h, m, s))

    # display median travel time
    median_time = df['Trip Duration'].median()
    m, s = divmod(median_time, 60)
    h, m = divmod(m, 60)
    d, h = divmod(h, 24)
    y, d = divmod(d, 365)
    print("Median trip time: %d years %02d days %02d hrs %02d min %02d sec" % (y, d, h, m, s))

    # display max travel time
    max_time = df['Trip Duration'].max()
    m, s = divmod(max_time, 60)
    h, m = divmod(m, 60)
    d, h = divmod(h, 24)
    y, d = divmod(d, 365)
    print("Maximum trip time: %d years %02d days %02d hrs %02d min %02d sec" % (y, d, h, m, s))

    # display min travel time
    min_time = df['Trip Duration'].min()
    m, s = divmod(min_time, 60)
    h, m = divmod(m, 60)
    d, h = divmod(h, 24)
    y, d = divmod(d, 365)
    print("Minimun trip time: %d years %02d days %02d hrs %02d min %02d sec" % (y, d, h, m, s))

    print("\nThis took %s seconds." % '{0:.2f}'.format((time.time() - start_time)))
    print('-'*50)


def user_stats(df):
    """Displays statistics on bikeshare users."""

    print('\nCalculating User Stats...\n')
    start_time = time.time()

    # Display counts of user types
    print("Counts of user type:\n")
    user_counts = df['User Type'].value_counts()

    # Display counts of gender
    print(df.groupby('Gender')['Gender'].count())

    # Display earliest, most recent, and most common year of birth

    print("\nEarliest birth year: " + str(int(df['Birth Year'].min())))
    print("Most recent birth year: " + str(int(df['Birth Year'].max())))
    birth_year = df.groupby('Birth Year')['Birth Year'].count()
    birth_year_sorted = birth_year.sort_values(ascending=False)
    tot_trips = df['Birth Year'].count()
    print("Most common birth year: " + str(int(birth_year_sorted.index[0])) + " (" + str(birth_year_sorted.iloc[0]) + " trips, " + '{0:.2f}%'.format(((birth_year_sorted.iloc[0]/tot_trips) * 100)) + " of trips)"'\n')


    print("\nThis took %s seconds." % '{0:.2f}'.format((time.time() - start_time)))
    print('-'*50)


def display_data(df, current_line):
    '''Displays five lines of data if the user specifies that they would like to '''

    display = input('\nWould you like to view individual trip data Type \'yes\' or \'no\'.\n').lower()
    if display == 'yes':
        print(df.iloc[current_line:current_line+5])
        current_line += 5
        return display_data(df, current_line)
    if display == 'no':
        return
    else:
        print("\nInvalid entry. Please specify yes or no.")
        return display_data(df, current_line)


def graph(df):
    '''Plots a histogram if the user would like to visualize the data'''

    graph = input('\nWould you like to plot a histogram of the data? Type \'yes\' or \'no\'.\n').lower()
    if graph == 'yes':
        df.hist()
        plt.savefig('path_to_file.png')
        print('The histogram has been saved to your current directory!')
    else:
        print('No histogram created.')


def main():
    while True:
        city, month, day = get_filters()
        df = load_data(city, month, day)

        # Header that tells you the city and any filters that were applied
        print('\n')
        print(city.upper() + ' -- ' + month.upper())

        time_stats(df)
        station_stats(df)
        popular_trip(df)
        trip_duration(df)
        user_stats(df)
        graph(df)
        display_data(df, 0)

        restart = input('\nWould you like to restart? Enter yes or no.\n')
        if restart.lower() != 'yes':
            break


if __name__ == "__main__":
	main()
